<Window x:Class="STranslate.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="clr-namespace:STranslate.ViewModel"
        xmlns:model="clr-namespace:STranslate.Model"
        mc:Ignorable="d"
        Background="Transparent"
        WindowStartupLocation="CenterScreen"
        MouseLeftButtonDown="Window_MouseLeftButtonDown"
        AllowsTransparency="True"
        ShowInTaskbar="False"
        ResizeMode="NoResize"
        KeyDown="Window_KeyDown"
        Topmost="True"
        Deactivated="Window_Deactivated"
        WindowStyle="None"
        SizeToContent="Height"
        Width="400"
        Icon="/Images/translate.ico">
    
    <Window.DataContext>
        <vm:MainVM />
    </Window.DataContext>
    
    <Window.Resources>
        <model:VisibilityConverter x:Key="String2VisibilityConverter"/>
        
        <ControlTemplate x:Key="ButtonTemplate" TargetType="Button">
            <Border x:Name="border"
                    CornerRadius="5"
                    Padding="4"
                    MaxHeight="25">
                <Image Source="/Images/copy2.png"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter TargetName="border" Property="Background" Value="#eaeaea"></Setter>
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                    <Setter TargetName="border" Property="Background" Value="#dddddd"></Setter>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        
        <ControlTemplate x:Key="ButtonTemplateSnakeCopy" TargetType="Button">
            <Border x:Name="border"
                    CornerRadius="5"
                    Padding="4"
                    MaxHeight="25">
                <Image Source="/Images/copy_s.png"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter TargetName="border" Property="Background" Value="#eaeaea"></Setter>
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                    <Setter TargetName="border" Property="Background" Value="#dddddd"></Setter>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        
        <ControlTemplate x:Key="ButtonTemplateSmallHumpCopy" TargetType="Button">
            <Border x:Name="border"
                    CornerRadius="5"
                    Padding="4"
                    MaxHeight="25">
                <Image Source="/Images/copy_h.png"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter TargetName="border" Property="Background" Value="#eaeaea"></Setter>
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                    <Setter TargetName="border" Property="Background" Value="#dddddd"></Setter>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        
        <ControlTemplate x:Key="ButtonTemplateLargeHumpCopy" TargetType="Button">
            <Border x:Name="border"
                    CornerRadius="5"
                    Padding="4"
                    MaxHeight="25">
                <Image Source="/Images/copy_h2.png"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter TargetName="border" Property="Background" Value="#eaeaea"></Setter>
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                    <Setter TargetName="border" Property="Background" Value="#dddddd"></Setter>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!--Combox-->
        <Style x:Key="IconStyle" TargetType="TextBlock">
            <Setter Property="FontFamily" Value="/STranslate;component/Images/#iconfont"/>
        </Style>
        <Style TargetType="{x:Type ComboBox}" x:Key="cmbstyle">
            <Setter Property="Background" Value="White"/>
            <Setter Property="ItemContainerStyle">
                <Setter.Value>
                    <!--ComBoxItem-->
                    <Style TargetType="ComboBoxItem">
                        <Setter Property="MinHeight" Value="22"></Setter>
                        <Setter Property="MinWidth" Value="80"></Setter>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ComboBoxItem">
                                    <Border Name="Back"
                                            CornerRadius="2"
                                            Background="Transparent"
                                            BorderThickness="0">
                                        <ContentPresenter  VerticalAlignment="Center" HorizontalAlignment="Left" Margin="5,0,0,0"></ContentPresenter>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="Back" Property="Background" Value="#eaeaea"></Setter>
                                        </Trigger>
                                        <Trigger Property="IsHighlighted" Value="True">
                                            <Setter TargetName="Back" Property="Background" Value="#eaeaea"></Setter>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Border BorderThickness="0" CornerRadius="5" Width="100" Height="30" Background="{TemplateBinding Background}" >
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="3*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid Grid.Column="0" x:Name="grid">
                                    <ToggleButton
                                        Width="{Binding ElementName=grid,Path=ActualWidth}"
                                        Height="{Binding ElementName=grid, Path=ActualHeight}"
                                        Content="{TemplateBinding Text}" VerticalAlignment="Center"
                                        HorizontalAlignment="Left" Margin="5,0,0,0"
                                        BorderThickness="0"
                                        Foreground="{TemplateBinding Foreground}"
                                        Background="{TemplateBinding Background}"
                                        IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press">
                                        <ToggleButton.Style >
                                            <Style TargetType="ToggleButton">
                                                <Setter Property="Background" Value="White"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="ToggleButton">
                                                            <Border Background="{TemplateBinding Background}" BorderThickness="0"  >
                                                                <TextBlock Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}" Margin="4 0 0 0"  HorizontalAlignment="Left" VerticalAlignment="Center"/>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Style.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Background" Value="White"/>
                                                    </Trigger>
                                                    <Trigger Property="IsMouseOver" Value="False">
                                                        <Setter Property="Background" Value="White"/>
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ToggleButton.Style>
                                    </ToggleButton>
                                </Grid>

                                <Grid Grid.Column="1" >
                                    <ToggleButton IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                  Foreground="{TemplateBinding Foreground}"
                                                  ClickMode="Press">
                                        <ToggleButton.Style>
                                            <Style TargetType="ToggleButton">
                                                <Setter Property="Background" Value="White"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="ToggleButton">
                                                            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
                                                                <Grid>
                                                                    <TextBlock Foreground="{TemplateBinding Foreground}" x:Name="arrow_tb" Text="&#xe61d;" Style="{StaticResource IconStyle}" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                                                                        <TextBlock.RenderTransform>
                                                                            <TransformGroup>
                                                                                <ScaleTransform/>
                                                                                <SkewTransform/>
                                                                                <RotateTransform/>
                                                                                <TranslateTransform/>
                                                                            </TransformGroup>
                                                                        </TextBlock.RenderTransform>
                                                                    </TextBlock>
                                                                </Grid>
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsChecked" Value="True">

                                                                </Trigger>
                                                                <EventTrigger RoutedEvent="Checked">
                                                                    <BeginStoryboard>
                                                                        <Storyboard >
                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="arrow_tb" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                                                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                                                                                <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="180"/>
                                                                            </DoubleAnimationUsingKeyFrames>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </EventTrigger>

                                                                <EventTrigger RoutedEvent="Unchecked">
                                                                    <BeginStoryboard>
                                                                        <Storyboard >
                                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="arrow_tb" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                                                <EasingDoubleKeyFrame KeyTime="00:00:00" Value="180"/>
                                                                                <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
                                                                            </DoubleAnimationUsingKeyFrames>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </EventTrigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ToggleButton.Style>
                                    </ToggleButton>
                                </Grid>
                                <Popup IsOpen="{TemplateBinding IsDropDownOpen}"
                                       Placement="Bottom" x:Name="Popup"
                                       Focusable="False"
                                       AllowsTransparency="True"
                                       PopupAnimation="Slide">
                                    <Border x:Name="DropDown"
                                            CornerRadius="5"
                                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                            MinWidth="{TemplateBinding ActualWidth}"
                                            SnapsToDevicePixels="True">
                                        <Border.Effect>
                                            <DropShadowEffect Color="Black" BlurRadius="2" ShadowDepth="0" Opacity="0.5"/>
                                        </Border.Effect>
                                        <ScrollViewer Margin="4,6,4,6" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" CanContentScroll="True">
                                            <!-- StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True -->
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Background="White"/>
                                        </ScrollViewer>
                                    </Border>
                                </Popup>
                            </Grid>


                            <Border.Effect>
                                <DropShadowEffect ShadowDepth="-1" Opacity="0.3" Color="#FF969696" BlurRadius="2"/>
                            </Border.Effect>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>


        </Style>
    </Window.Resources>
    
    <Border Background="#fff"
            BorderBrush="#acacac"
            BorderThickness="1"
            CornerRadius="10">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="5*" />
                <RowDefinition Height="*" />
                <RowDefinition Height="7*" />
            </Grid.RowDefinitions>

            <!--header-->
            <Grid x:Name="Header">
                <Button Click="Top_Click">
                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="border"
                                    CornerRadius="5"
                                    Padding="5"
                                    HorizontalAlignment="Left"
                                    Margin="8,5,0,0"
                                    MaxHeight="30">
                                <Image Height="20"
                                       Source="{Binding TopImgSource}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter TargetName="border" Property="Background" Value="#eaeaea"></Setter>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter TargetName="border" Property="Background" Value="#dddddd"></Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
            </Grid>
            
            <!--input-->
            <Grid x:Name="Input"
                  Grid.Row="1"
                  Margin="10,0,10,0">
                <!--输入框-->
                <Border x:Name="BorderInput"
                        Background="#f6f6f6"
                        BorderThickness="0"
                        CornerRadius="4"
                        Margin="5">
                    <Grid>
                        <TextBox x:Name="TextBoxInput"
                                 Background="Transparent"
                                 BorderBrush="{x:Null}"
                                 Margin="10,10,5,35"
                                 BorderThickness="0"
                                 FontSize="16"
                                 MinHeight="70"
                                 MaxHeight="200"
                                 TextWrapping="Wrap"
                                 AcceptsReturn="True"
                                 VerticalContentAlignment="Top"
                                 HorizontalScrollBarVisibility="Disabled"
                                 VerticalScrollBarVisibility="Hidden"
                                 Text="{Binding InputTxt,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}">
                            <TextBox.InputBindings>
                                <KeyBinding Command="{Binding TranslateCmd}" Key="Enter" />
                            </TextBox.InputBindings>
                        </TextBox>
                        <StackPanel Orientation="Horizontal"
                                    Margin="10,5"
                                    VerticalAlignment="Bottom">
                            <Button Template="{StaticResource ButtonTemplate}"
                                    Visibility="{Binding InputTxt,Converter={StaticResource String2VisibilityConverter}}"
                                    Command="{Binding CopyInputCmd}"/>
                            <Border Margin="10,0,0,2"
                                    Background="#eaeaea"
                                    CornerRadius="8"
                                    Visibility="{Binding IdentifyLanguage,Converter={StaticResource String2VisibilityConverter}}"
                                    VerticalAlignment="Bottom">
                                <StackPanel Margin="5,2"
                                            Orientation="Horizontal">
                                    <TextBlock Text="识别为 "
                                                Foreground="#999999"/>
                                    <TextBlock Text="{Binding IdentifyLanguage}"
                                                Foreground="#3478f6"/>
                                </StackPanel>
                            </Border>
                        </StackPanel>
                    </Grid>
                </Border>
            </Grid>
            
            <!--mid-->
            <StackPanel x:Name="MidArea"
                        Grid.Row="2"
                        HorizontalAlignment="Center"
                        Orientation="Horizontal">
                <Label Content="当前语言:"
                       Background="Transparent"
                       BorderThickness="0" />
                <ComboBox x:Name="InCombo"
                          Style="{StaticResource cmbstyle}"
                          ItemsSource="{Binding InputCombo}"
                          SelectedItem="{Binding InputComboSelected,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" />
                <Separator Margin="20,0"/>
                <Label Content="目标语言:"
                       Background="Transparent"
                       BorderThickness="0" />
                <ComboBox x:Name="OutCombo"
                          Style="{StaticResource cmbstyle}"
                          ItemsSource="{Binding OutputCombo}"
                          SelectedItem="{Binding OutputComboSelected,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" />
            </StackPanel>
            
            <!--output-->
            <Grid x:Name="Output"
                  Margin="10,0,10,10"
                  Grid.Row="3">
                <!--输出框-->
                <Border x:Name="BorderOutput"
                        Background="#f6f6f6"
                        BorderThickness="0"
                        CornerRadius="4"
                        Margin="5"
                        Height="{Binding ElementName=Output, Path=Height}">
                    <Grid>
                        <TextBox x:Name="TextBoxOutput"
                                Background="Transparent"
                                BorderBrush="{x:Null}"
                                BorderThickness="0"
                                IsReadOnly="True"
                                Margin="10,10,5,35"
                                MaxHeight="400"
                                FontSize="16"
                                TextWrapping="Wrap"
                                VerticalContentAlignment="Top"
                                HorizontalScrollBarVisibility="Disabled"
                                VerticalScrollBarVisibility="Hidden"
                                Text="{Binding OutputTxt}"/>
                        <StackPanel Orientation="Horizontal"
                                    Margin="10,5"
                                    VerticalAlignment="Bottom">
                            <!--普通复制-->
                            <Button Template="{StaticResource ButtonTemplate}"
                                    Visibility="{Binding OutputTxt,Converter={StaticResource String2VisibilityConverter}}"
                                    Command="{Binding CopyResultCmd}"/>
                            <!--蛇形复制-->
                            <Button Margin="5,0"
                                    Template="{StaticResource ButtonTemplateSnakeCopy}"
                                    Visibility="{Binding SnakeRet,Converter={StaticResource String2VisibilityConverter}}"
                                    Command="{Binding CopySnakeResultCmd}"/>
                            <!--小驼峰复制-->
                            <Button Template="{StaticResource ButtonTemplateSmallHumpCopy}"
                                    Visibility="{Binding SmallHumpRet,Converter={StaticResource String2VisibilityConverter}}"
                                    Command="{Binding CopySmallHumpResultCmd}"/>
                            <!--大驼峰复制-->
                            <Button Margin="5,0"
                                    Template="{StaticResource ButtonTemplateLargeHumpCopy}"
                                    Visibility="{Binding LargeHumpRet,Converter={StaticResource String2VisibilityConverter}}"
                                    Command="{Binding CopyLargeHumpResultCmd}"/>
                        </StackPanel>
                    </Grid>
                </Border>
            </Grid>
        </Grid>
    </Border>
</Window>