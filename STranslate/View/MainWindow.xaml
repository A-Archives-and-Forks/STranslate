<Window x:Class="STranslate.View.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:vm="clr-namespace:STranslate.ViewModel"
        xmlns:local="clr-namespace:STranslate.View"
        mc:Ignorable="d"
        x:Name="Mwin"
        Background="Transparent"
        WindowStartupLocation="CenterScreen"
        MouseLeftButtonDown="Window_MouseLeftButtonDown"
        AllowsTransparency="True"
        ShowInTaskbar="False"
        ResizeMode="NoResize"
        Topmost="True"
        Deactivated="Window_Deactivated"
        Closing="Mwin_Closing"
        WindowStyle="None"
        SizeToContent="Height"
        Width="400"
        Icon="/Images/translate.ico">

    <Window.Resources>
        <ContextMenu x:Key="TrayMenu">
            <MenuItem Header="输入翻译"
                      Command="{Binding InputTranslateCmd}"/>
            <Separator />
            <MenuItem Header="显示主界面"
                      Command="{Binding ShowMainWinCmd}"/>
            <MenuItem Header="开机自启"
                      IsChecked="{Binding IsStartup}"
                      Command="{Binding StartupCmd}"/>
            <Separator />
            <MenuItem Header="退出"
                      Command="{Binding ExitCmd}"/>
        </ContextMenu>
        <Style x:Key="ExpanderStyle1" TargetType="{x:Type Expander}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="#918C8C"/>
            <Setter Property="BorderThickness" Value="0 0 0 0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="0" SnapsToDevicePixels="True">
                            <DockPanel>
                                <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}"
                                             Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}"
                                             FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}"
                                             FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}"
                                             FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                             IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                             Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding
                                   VerticalContentAlignment}">
                                    <ToggleButton.FocusVisualStyle>
                                        <Style>
                                            <Setter Property="Control.Template">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Border>
                                                            <Rectangle Margin="0"
                                                                       SnapsToDevicePixels="True"
                                                                       Stroke="Black"
                                                                       StrokeThickness="1"
                                                                       StrokeDashArray="1 2"/>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.FocusVisualStyle>
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Border Padding="{TemplateBinding Padding}">
                                                            <Grid>
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="19*"/>
                                                                </Grid.ColumnDefinitions>
                                                                
                                                                <Path Grid.Column="0"
                                                                      x:Name="arrow"
                                                                      Data="M1,1.5L4.5,5 8,1.5"
                                                                      HorizontalAlignment="Right"
                                                                      SnapsToDevicePixels="False"
                                                                      Stroke="#918C8C"
                                                                      StrokeThickness="2"
                                                                      VerticalAlignment="Center"
                                                                      Height="10"
                                                                      Margin="10,10" />
                                                                
                                                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                                  Content="{TemplateBinding Content}"
                                                                                  ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                                                  HorizontalAlignment="Left"
                                                                                  Margin="4,0,0,0"
                                                                                  RecognizesAccessKey="True"
                                                                                  SnapsToDevicePixels="True"
                                                                                  VerticalAlignment="Center"  />
                                                            </Grid>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Setter Property="Data" TargetName="arrow" Value="M1,4.5L4.5,1 8,4.5"/>
                                                            </Trigger>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Stroke" TargetName="arrow" Value="Black"/>
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="True">
                                                                <Setter Property="Stroke" TargetName="arrow" Value="Black"/>
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Stroke" TargetName="arrow" Value="#FF707070"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                                <ContentPresenter x:Name="ExpandSite"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  Content="{TemplateBinding Content}"
                                                  ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                  DockPanel.Dock="Bottom"
                                                  Focusable="False"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  Margin="{TemplateBinding Padding}"
                                                  Visibility="Collapsed"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </DockPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded"
                                     Value="True">
                                <Setter Property="Visibility"
                                        TargetName="ExpandSite"
                                        Value="Visible"/>
                            </Trigger>
                            <Trigger Property="IsEnabled"
                                     Value="False">
                                <Setter Property="Foreground"
                                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Window.InputBindings>
        <KeyBinding Modifiers="Ctrl+Shift"
                    Key="Q"
                    Command="{Binding ExitCmd}"/>
        <KeyBinding Modifiers="Ctrl+Shift"
                    Key="T"
                    Command="{Binding TopmostCmd}"/>
        <KeyBinding Key="Esc"
                    Command="{Binding EscCmd}"/>
    </Window.InputBindings>

    <Border Style="{DynamicResource BorderMainStyle}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="5*" />
                <RowDefinition Height="*" />
                <RowDefinition Height="7*" />
            </Grid.RowDefinitions>

            <!--tray-->
            <tb:TaskbarIcon x:Name="myNotifyIcon"
                            Visibility="{Binding IsVisibility, Converter={StaticResource BooleanToVisibilityConverter}}"
                            ToolTipText="STranslate"
                            ContextMenu="{StaticResource TrayMenu}"
                            DoubleClickCommand="{Binding InputTranslateCmd}"
                            IconSource="/Images/translate.ico"/>

            <!--header-->
            <Grid x:Name="Header">
                <Button x:Name="TopmostBtn"
                        Command="{Binding TopmostCmd}"
                        Template="{DynamicResource ButtonTemplateUnTopmost}"/>
                <Button Width="auto"
                        Template="{DynamicResource ButtonTemplateTheme}"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Center"
                        Margin="0,0,100,0"
                        Command="{Binding ThemeConvertCmd}"
                        CommandParameter="{Binding ElementName=Mwin}"/>
                <ComboBox Style="{DynamicResource cmbstyle}"
                          Margin="0,5,10,0"
                          ItemsSource="{Binding TranslationInterface}"
                          SelectedItem="{Binding SelectedTranslationInterface, Mode=TwoWay, NotifyOnSourceUpdated=True}"
                          DisplayMemberPath="Name"
                          HorizontalAlignment="Right"/>
            </Grid>

            <!--input-->
            <Grid x:Name="Input"
                  Grid.Row="1"
                  FocusManager.FocusedElement="{Binding ElementName=TextBoxInput}"
                  Margin="10,0,10,0">
                <!--输入框-->
                <Border x:Name="BorderInput"
                        Style="{DynamicResource BorderInOutputStyle}">
                    <Grid>
                        <TextBox x:Name="TextBoxInput"
                                 Style="{DynamicResource TextBoxInputStyle}"
                                 Text="{Binding InputTxt, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <TextBox.InputBindings>
                                <KeyBinding Command="{Binding TranslateCmd}" Key="Enter" />
                            </TextBox.InputBindings>
                        </TextBox>
                        <StackPanel Orientation="Horizontal"
                                    Margin="10,5"
                                    VerticalAlignment="Bottom">
                            <Button Template="{DynamicResource ButtonTemplateSpeak}"
                                    Visibility="{Binding InputTxt, Converter={StaticResource String2VisibilityConverter}}"
                                    Command="{Binding SourceSpeakCmd}"/>
                            <Button Template="{DynamicResource ButtonTemplate}"
                                    Visibility="{Binding InputTxt, Converter={StaticResource String2VisibilityConverter}}"
                                    Command="{Binding CopyInputCmd}"/>
                            <Border Style="{DynamicResource LanguageMarkBorderStyle}"
                                    Visibility="{Binding IdentifyLanguage, Converter={StaticResource String2VisibilityConverter}}">
                                <StackPanel Margin="5,2"
                                            Orientation="Horizontal">
                                    <TextBlock Text="识别为 "
                                               Style="{DynamicResource LanguageMarkTextBlockStyle}"/>
                                    <TextBlock Text="{Binding IdentifyLanguage}"
                                               Foreground="#af67c1"/>
                                </StackPanel>
                            </Border>
                        </StackPanel>
                    </Grid>
                </Border>
            </Grid>

            <!--mid-->
            <StackPanel x:Name="MidArea"
                        Grid.Row="2"
                        HorizontalAlignment="Center"
                        Orientation="Horizontal">
                <TextBlock Text="当前语言:  "
                           Style="{DynamicResource MidStyle}"/>
                <ComboBox x:Name="InCombo"
                          Style="{DynamicResource cmbstyle}"
                          ItemsSource="{Binding InputCombo}"
                          SelectedItem="{Binding InputComboSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <i:InvokeCommandAction Command="{Binding SelectLangChangedCmd}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </ComboBox>
                <Separator Margin="20,0"/>
                <TextBlock Text="目标语言:  "
                           Style="{DynamicResource MidStyle}"/>
                <ComboBox x:Name="OutCombo"
                          Style="{DynamicResource cmbstyle}"
                          ItemsSource="{Binding OutputCombo}"
                          SelectedItem="{Binding OutputComboSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <i:InvokeCommandAction Command="{Binding SelectLangChangedCmd}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </ComboBox>
            </StackPanel>

            <!--output-->
            <Grid x:Name="Output"
                  Margin="10,0,10,10"
                  Grid.Row="3">
                <Expander IsExpanded="{Binding IsExpanded}"
                          Style="{StaticResource ExpanderStyle1}">
                    <Expander.Header>
                        <local:Loading Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    </Expander.Header>
                    <!--输出框-->
                    <Border x:Name="BorderOutput"
                        Style="{DynamicResource BorderInOutputStyle}"
                        Height="{Binding Height, ElementName=Output}">
                        <Grid>
                            <TextBox x:Name="TextBoxOutput"
                                 Style="{DynamicResource TextBoxOutputStyle}"
                                 Text="{Binding OutputTxt}"/>
                            <StackPanel Orientation="Horizontal"
                                    Margin="10,5"
                                    VerticalAlignment="Bottom">
                                <Button Template="{DynamicResource ButtonTemplateSpeak}"
                                    Visibility="{Binding OutputTxt, Converter={StaticResource String2VisibilityConverter}}"
                                    Command="{Binding TargetSpeakCmd}"/>
                                <!--普通复制-->
                                <Button Template="{DynamicResource ButtonTemplate}"
                                    Visibility="{Binding OutputTxt, Converter={StaticResource String2VisibilityConverter}}"
                                    Command="{Binding CopyResultCmd}"/>
                                <!--蛇形复制-->
                                <Button Margin="5,0"
                                    Template="{DynamicResource ButtonTemplateSnakeCopy}"
                                    Visibility="{Binding SnakeRet, Converter={StaticResource String2VisibilityConverter}}"
                                    Command="{Binding CopySnakeResultCmd}"/>
                                <!--小驼峰复制-->
                                <Button Template="{DynamicResource ButtonTemplateSmallHumpCopy}"
                                    Visibility="{Binding SmallHumpRet, Converter={StaticResource String2VisibilityConverter}}"
                                    Command="{Binding CopySmallHumpResultCmd}"/>
                                <!--大驼峰复制-->
                                <Button Margin="5,0"
                                    Template="{DynamicResource ButtonTemplateLargeHumpCopy}"
                                    Visibility="{Binding LargeHumpRet, Converter={StaticResource String2VisibilityConverter}}"
                                    Command="{Binding CopyLargeHumpResultCmd}"/>
                            </StackPanel>
                        </Grid>
                    </Border>
                </Expander>
            </Grid>
        </Grid>
    </Border>
</Window>